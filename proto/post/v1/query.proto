syntax = "proto3";
package post.v1;

import "post/v1/genesis.proto";
import "google/api/annotations.proto";
import "post/v1/post_response.proto";
import "post/v1/comment_response.proto";
import "post/v1/comment_received_response.proto";
import "post/v1/likes_i_made.proto";
import "post/v1/likes_received.proto";
import "post/v1/activities_received_response.proto";
import "post/v1/category_response.proto";
import "post/v1/category_topic_response.proto";
import "post/v1/topic_response.proto";
import "post/v1/category_posts_response.proto";

option go_package = "github.com/rollchains/tlock/x/post/types";

// Query provides defines the gRPC querier service.
service Query {
  // Params queries all parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/post/v1/params";
  }

  // ResolveName allows a user to resolve the name of an account.
  rpc ResolveName(QueryResolveNameRequest) returns (QueryResolveNameResponse) {
    option (google.api.http).get = "/post/v1/name/{address}";
  }

  rpc QueryHomePosts(QueryHomePostsRequest) returns (QueryHomePostsResponse) {
    option (google.api.http).get = "/post/v1/homePosts";
  }

  rpc QueryFirstPageHomePosts(QueryFirstPageHomePostsRequest) returns (QueryFirstPageHomePostsResponse) {
    option (google.api.http).get = "/post/v1/firstPageHomePosts/{page}";
  }

  rpc SearchTopics(SearchTopicsRequest) returns (SearchTopicsResponse) {
    option (google.api.http).get = "/post/v1/topics/{matching}";
  }

  rpc QueryTopicPosts(QueryTopicPostsRequest) returns (QueryTopicPostsResponse) {
    option (google.api.http).get = "/post/v1/topic/posts/{topic_id}/{page}";
  }

  // QueryPost allows querying a specific post by its ID
  rpc QueryPost(QueryPostRequest) returns (QueryPostResponse) {
    option (google.api.http).get = "/post/v1/get/{post_id}";
  }

  rpc QueryUserCreatedPosts(QueryUserCreatedPostsRequest) returns (QueryUserCreatedPostsResponse) {
    option (google.api.http).get = "/post/v1/user/created/{address}/{page}";
  }

  rpc LikesIMade(LikesIMadeRequest) returns (LikesIMadeResponse) {
    option (google.api.http).get = "/post/v1/likes/i/made/{address}/{page}";
  }

  rpc SavesIMade(SavesIMadeRequest) returns (SavesIMadeResponse) {
    option (google.api.http).get = "/post/v1/saves/i/made/{address}/{page}";
  }

  rpc LikesReceived(LikesReceivedRequest) returns (LikesReceivedResponse) {
    option (google.api.http).get = "/post/v1/likes/received/{address}/{page}";
  }

  rpc QueryComments(QueryCommentsRequest) returns (QueryCommentsResponse) {
    option (google.api.http).get = "/post/v1/comments/{id}/{page}";
  }

  rpc QueryCommentsReceived(QueryCommentsReceivedRequest) returns (QueryCommentsReceivedResponse) {
    option (google.api.http).get = "/post/v1/comments/received/{address}/{page}";
  }

  rpc QueryActivitiesReceived(QueryActivitiesReceivedRequest) returns (QueryActivitiesReceivedResponse) {
    option (google.api.http).get = "/post/v1/activities/received/{address}/{page}";
  };

//  rpc QueryCategoryExists(QueryCategoryExistsRequest) returns (QueryCategoryExistsResponse) {
//    option (google.api.http).get = "/post/v1/category/exists/{category}";
//  };

  rpc QueryCategories(QueryCategoriesRequest) returns (QueryCategoriesResponse) {
    option (google.api.http).get = "/post/v1/categories";
  };

  rpc QueryTopicsByCategory(QueryTopicsByCategoryRequest) returns (QueryTopicsByCategoryResponse) {
    option (google.api.http).get = "/post/v1/category/topics/{category_id}/{page}";
  };

  rpc QueryCategoryByTopic(QueryCategoryByTopicRequest) returns (QueryCategoryByTopicResponse) {
    option (google.api.http).get = "/post/v1/topic/category/{topic_id}";
  };

  rpc QueryCategoryPosts(QueryCategoryPostsRequest) returns (QueryCategoryPostsResponse) {
    option (google.api.http).get = "/post/v1/category/posts/{category_id}/{page}";
  };

  rpc QueryFollowingPosts(QueryFollowingPostsRequest) returns (QueryFollowingPostsResponse) {
    option (google.api.http).get = "/post/v1/following/posts/{address}/{page}";
  };

  rpc QueryFollowingTopics(QueryFollowingTopicsRequest) returns (QueryFollowingTopicsResponse) {
    option (google.api.http).get = "/post/v1/following/topics/{address}/{page}";
  };
  rpc QueryIsFollowingTopic(QueryIsFollowingTopicRequest) returns (QueryIsFollowingTopicResponse) {
    option (google.api.http).get = "/post/v1/isFollowing/topic/{address}/{topic_id}";
  };

  rpc QueryUncategorizedTopics(QueryUncategorizedTopicsRequest) returns (QueryUncategorizedTopicsResponse) {
    option (google.api.http).get = "/post/v1/uncategorized/topics/{address}/{page}/{limit}";
  }
  rpc QueryVoteOption(QueryVoteOptionRequest) returns (QueryVoteOptionResponse) {
    option (google.api.http).get = "/post/v1/vote/option/{address}/{post_id}";
  }

  rpc QueryTopicImage(QueryTopicImageRequest) returns (QueryTopicImageResponse) {
    option (google.api.http).get = "/post/v1/topic/image/{topic_id}";
  }

  rpc QueryTopic(QueryTopicRequest) returns (QueryTopicResponse) {
    option (google.api.http).get = "/post/v1/topic/{topic_id}";
  }

  rpc QueryTrendingKeywords(QueryTrendingKeywordsRequest) returns (QueryTrendingKeywordsResponse) {
    option (google.api.http).get = "/post/v1/trending/keywords/{page}";
  };

  rpc QueryTrendingTopics(QueryTrendingTopicsRequest) returns (QueryTrendingTopicsResponse) {
    option (google.api.http).get = "/post/v1/trending/topics/{page}";
  };

  rpc QueryPaidPostImage(QueryPaidPostImageRequest) returns (QueryPaidPostImageResponse) {
    option (google.api.http).get = "/post/v1/paid/image/{image_id}";
  }
}

// QueryResolveNameRequest grabs the name of a wallet.
message QueryResolveNameRequest {
  string address = 1;
}

// QueryResolveNameResponse grabs the wallet linked to a name.
message QueryResolveNameResponse {
  string name = 1;
}

message QueryHomePostsRequest {
}

message QueryHomePostsResponse {
  uint64 page = 1;
  repeated PostResponse posts = 2;
}

message SearchTopicsRequest {
  string matching = 1;
}

message SearchTopicsResponse {
  repeated TopicResponse topics = 1;
}

message QueryTopicPostsRequest {
  string topic_id = 1;
  uint64 page = 2;
}

message QueryTopicPostsResponse {
  uint64 page = 1;
  repeated PostResponse posts = 2;
}

message QueryFirstPageHomePostsRequest {
  uint64 page = 1;
}

message QueryFirstPageHomePostsResponse {
  uint64 page = 1;
  repeated PostResponse posts = 2;
}

message QueryUserCreatedPostsRequest {
  string address = 1;
  uint64 page = 2;
}

message QueryUserCreatedPostsResponse {
  uint64 page = 1;
  repeated PostResponse posts = 2;
}

// QueryPostRequest defines the request for querying a post
message QueryPostRequest {
  string post_id = 1;
}

// QueryPostResponse defines the response for querying a post
message QueryPostResponse {
  PostResponse post = 1;
  repeated TopicResponse topics = 2;
}

message LikesIMadeRequest {
  string address = 1;
  uint64 page = 2;
}

message LikesIMadeResponse {
  uint64 page = 1;
  repeated PostResponse posts = 2;
}

message SavesIMadeRequest {
  string address = 1;
  uint64 page = 2;
}

message SavesIMadeResponse {
  uint64 page = 1;
  repeated PostResponse posts = 2;
}

message LikesReceivedRequest {
  string address = 1;
  uint64 page = 2;
}

message LikesReceivedResponse {
  uint64 page = 1;
  repeated LikesReceived likes_received = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryCommentsRequest {
  string id = 1;
  uint64 page = 2;
}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryCommentsResponse {
  uint64 page = 1;
  repeated CommentResponse comments = 2;
}

message QueryCommentsReceivedRequest {
  string address = 1;
  uint64 page = 2;
}

message QueryCommentsReceivedResponse {
  uint64 page = 1;
  repeated CommentReceivedResponse comments = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1;
}

message QueryActivitiesReceivedRequest {
  string address = 1;
  uint64 page = 2;
}

message QueryActivitiesReceivedResponse {
  uint64 page = 1;
  repeated ActivitiesReceivedResponse activitiesReceived = 2;
}

message QueryCategoryExistsRequest {
  string category = 1;
}

message QueryCategoryExistsResponse {
  bool exists = 1;
}

message QueryCategoriesRequest {
}

message QueryCategoriesResponse {
  repeated CategoryResponse categories = 1;
}

message QueryTopicsByCategoryRequest {
  string category_id = 1;
  uint64 page = 2;
}

message QueryTopicsByCategoryResponse {
  uint64 page = 1;
  CategoryTopicResponse response = 2;
}


message QueryCategoryByTopicRequest {
  string topic_id = 1;
}

message QueryCategoryByTopicResponse {
  CategoryResponse category = 1;
}

message QueryCategoryPostsRequest {
  string category_id = 1;
  uint64 page = 2;
}

message QueryCategoryPostsResponse {
  uint64 page = 1;
  CategoryPostsResponse response = 2;
}

message QueryFollowingPostsRequest {
  string address = 1;
  uint64 page = 2;
}

message QueryFollowingPostsResponse {
  uint64 page = 1;
  repeated PostResponse posts = 2;
}

message QueryFollowingTopicsRequest {
  string address = 1;
  uint64 page = 2;
}

message QueryFollowingTopicsResponse {
  uint64 page = 1;
  repeated TopicResponse topics = 2;
}
message QueryIsFollowingTopicRequest {
  string address = 1;
  string topic_id = 2;
}
message QueryIsFollowingTopicResponse {
  bool is_following = 1;
}
message QueryUncategorizedTopicsRequest {
  string address = 1;
  int64 page = 2;
  int64 limit = 3;
}

message QueryUncategorizedTopicsResponse {
  uint64 total = 1;
  repeated TopicResponse topics = 2;
}

message QueryVoteOptionRequest {
  string address = 1;
  string post_id = 2;
}

message QueryVoteOptionResponse {
  string option_id = 1;
}

message QueryTopicImageRequest {
  string topic_id = 1;
}
message QueryTopicImageResponse {
  string image = 1;
}

message QueryTopicRequest {
  string topic_id = 1;
}

message QueryTopicResponse {
  TopicResponse topic = 1;
}


message QueryTrendingKeywordsRequest {
  uint64 page = 1;
}

message QueryTrendingKeywordsResponse {
  uint64 page = 1;
  repeated TopicResponse topics = 2;
}

message QueryTrendingTopicsRequest {
  uint64 page = 1;
}

message QueryTrendingTopicsResponse {
  uint64 page = 1;
  repeated TopicResponse topics = 2;
}

message QueryPaidPostImageRequest {
  string image_id = 1;
}
message QueryPaidPostImageResponse {
  string image = 1;
}