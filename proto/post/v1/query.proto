syntax = "proto3";
package post.v1;

import "post/v1/genesis.proto";
import "google/api/annotations.proto";
import "post/v1/postResponse.proto";
import "post/v1/commentResponse.proto";
import "post/v1/commentReceivedResponse.proto";
import "post/v1/likesIMade.proto";
import "post/v1/likesReceived.proto";
import "post/v1/activitiesReceivedResponse.proto";
import "post/v1/categoryResponse.proto";
import "post/v1/categoryTopicResponse.proto";
import "post/v1/topicResponse.proto";
import "post/v1/categoryPostsResponse.proto";

option go_package = "github.com/rollchains/tlock/x/post/types";

// Query provides defines the gRPC querier service.
service Query {
  // Params queries all parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/post/v1/params";
  }

  // ResolveName allows a user to resolve the name of an account.
  rpc ResolveName(QueryResolveNameRequest) returns (QueryResolveNameResponse) {
    option (google.api.http).get = "/post/v1/name/{wallet}";
  }

  rpc QueryHomePosts(QueryHomePostsRequest) returns (QueryHomePostsResponse) {
    option (google.api.http).get = "/post/v1/homePosts";
  }

  rpc QueryFirstPageHomePosts(QueryFirstPageHomePostsRequest) returns (QueryFirstPageHomePostsResponse) {
    option (google.api.http).get = "/post/v1/firstPageHomePosts";
  }

  rpc SearchTopics(SearchTopicsRequest) returns (SearchTopicsResponse) {
    option (google.api.http).get = "/post/v1/topics/{matching}";
  }

  rpc QueryTopicPosts(QueryTopicPostsRequest) returns (QueryTopicPostsResponse) {
    option (google.api.http).get = "/post/v1/topic/posts/{topic_id}";
  }

  // QueryPost allows querying a specific post by its ID
  rpc QueryPost(QueryPostRequest) returns (QueryPostResponse) {
    option (google.api.http).get = "/post/v1/get/{post_id}";
  }

  rpc QueryUserCreatedPosts(QueryUserCreatedPostsRequest) returns (QueryUserCreatedPostsResponse) {
    option (google.api.http).get = "/post/v1/user/created/{wallet}";
  }

  rpc LikesIMade(LikesIMadeRequest) returns (LikesIMadeResponse) {
    option (google.api.http).get = "/post/v1/likes/i/made/{wallet}";
  }

  rpc SavesIMade(SavesIMadeRequest) returns (SavesIMadeResponse) {
    option (google.api.http).get = "/post/v1/saves/i/made/{wallet}";
  }

  rpc LikesReceived(LikesReceivedRequest) returns (LikesReceivedResponse) {
    option (google.api.http).get = "/post/v1/likes/received/{wallet}";
  }

  rpc QueryComments(QueryCommentsRequest) returns (QueryCommentsResponse) {
    option (google.api.http).get = "/post/v1/comments/{id}";
  }

  rpc QueryCommentsReceived(QueryCommentsReceivedRequest) returns (QueryCommentsReceivedResponse) {
    option (google.api.http).get = "/post/v1/comments/received/{wallet}";
  }

  rpc QueryActivitiesReceived(QueryActivitiesReceivedRequest) returns (QueryActivitiesReceivedResponse) {
    option (google.api.http).get = "/post/v1/activites/received/{address}";
  };

//  rpc QueryCategoryExists(QueryCategoryExistsRequest) returns (QueryCategoryExistsResponse) {
//    option (google.api.http).get = "/post/v1/category/exists/{category}";
//  };

  rpc QueryCategories(QueryCategoriesRequest) returns (QueryCategoriesResponse) {
    option (google.api.http).get = "/post/v1/categories";
  };

  rpc QueryTopicsByCategory(QueryTopicsByCategoryRequest) returns (QueryTopicsByCategoryResponse) {
    option (google.api.http).get = "/post/v1/category/topics/{category_id}";
  };

  rpc QueryCategoryPosts(QueryCategoryPostsRequest) returns (QueryCategoryPostsResponse) {
    option (google.api.http).get = "/post/v1/category/posts/{category_id}";
  };

  rpc QueryHotTopics72(QueryHotTopics72Request) returns (QueryHotTopics72Response) {
    option (google.api.http).get = "/post/v1/hot/topics/72";
  };

  rpc QueryFollowingPosts(QueryFollowingPostsRequest) returns (QueryFollowingPostsResponse) {
    option (google.api.http).get = "/post/v1/following/posts/{address}";
  };

  rpc QueryFollowingTopics(QueryFollowingTopicsRequest) returns (QueryFollowingTopicsResponse) {
    option (google.api.http).get = "/post/v1/following/topics/{address}";
  };
  rpc QueryIsFollowingTopic(QueryIsFollowingTopicRequest) returns (QueryIsFollowingTopicResponse) {
    option (google.api.http).get = "/post/v1/isFollowing/topic/{address}/{topic_id}";
  };

  rpc QueryUncategorizedTopics(QueryUncategorizedTopicsRequest) returns (QueryUncategorizedTopicsResponse) {
    option (google.api.http).get = "/post/v1/uncategorized/topics/{address}/{page}/{limit}";
  }
  rpc QueryVoteOption(QueryVoteOptionRequest) returns (QueryVoteOptionResponse) {
    option (google.api.http).get = "/post/v1/vote/option/{address}/{post_id}";
  }
}

// QueryResolveNameRequest grabs the name of a wallet.
message QueryResolveNameRequest {
  string wallet = 1;
}

// QueryResolveNameResponse grabs the wallet linked to a name.
message QueryResolveNameResponse {
  string name = 1;
}

message QueryHomePostsRequest {
}

message QueryHomePostsResponse {
  repeated PostResponse posts = 1;
}

message SearchTopicsRequest {
  string matching = 1;
}

message SearchTopicsResponse {
  repeated TopicResponse topics = 1;
}

message QueryTopicPostsRequest {
    string topic_id = 1;
}

message QueryTopicPostsResponse {
  repeated PostResponse posts = 1;
}

message QueryFirstPageHomePostsRequest {
}

message QueryFirstPageHomePostsResponse {
  repeated PostResponse posts = 1;
}

message QueryUserCreatedPostsRequest {
  string wallet = 1;
}

message QueryUserCreatedPostsResponse {
  repeated PostResponse posts = 1;
}

// QueryPostRequest defines the request for querying a post
message QueryPostRequest {
  string post_id = 1;
}

// QueryPostResponse defines the response for querying a post
message QueryPostResponse {
  PostResponse post = 1;
}

message LikesIMadeRequest {
  string wallet = 1;
//  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message LikesIMadeResponse {
//  repeated LikesIMade likes_made = 1;
  repeated PostResponse posts = 1;
//  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message SavesIMadeRequest {
  string wallet = 1;
}

message SavesIMadeResponse {
  repeated PostResponse posts = 1;
}

message LikesReceivedRequest {
  string wallet = 1;
}

message LikesReceivedResponse {
  repeated LikesReceived likes_received = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryCommentsRequest {
  string id = 1;
}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryCommentsResponse {
  repeated CommentResponse comments = 1;
}

message QueryCommentsReceivedRequest {
  string wallet = 1;
}

message QueryCommentsReceivedResponse {
  repeated CommentReceivedResponse comments = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1;
}

message QueryActivitiesReceivedRequest {
  string address = 1;
}

message QueryActivitiesReceivedResponse {
  repeated ActivitiesReceivedResponse activitiesReceived = 1;
}

message QueryCategoryExistsRequest {
  string category = 1;
}

message QueryCategoryExistsResponse {
  bool exists = 1;
}

message QueryCategoriesRequest {
}

message QueryCategoriesResponse {
  repeated CategoryResponse categories = 1;
}

message QueryTopicsByCategoryRequest {
  string category_id = 1;
}

message QueryTopicsByCategoryResponse {
  CategoryTopicResponse response = 1;
}

message QueryCategoryPostsRequest {
  string category_id = 1;
}

message QueryCategoryPostsResponse {
  CategoryPostsResponse response = 1;
}

message QueryHotTopics72Request {

}

message QueryHotTopics72Response {
  repeated TopicResponse topics = 1;
}

message QueryFollowingPostsRequest {
  string address = 1;
}

message QueryFollowingPostsResponse {
  repeated PostResponse posts = 1;
}

message QueryFollowingTopicsRequest {
  string address = 1;
}

message QueryFollowingTopicsResponse {
  repeated TopicResponse topics = 1;
}
message QueryIsFollowingTopicRequest {
  string address = 1;
  string topic_id = 2;
}
message QueryIsFollowingTopicResponse {
  bool is_following = 1;
}
message QueryUncategorizedTopicsRequest {
  string address = 1;
  int64 page = 2;
  int64 limit = 3;
}

message QueryUncategorizedTopicsResponse {
  uint64 total = 1;
  repeated TopicResponse topics = 2;
}

message QueryVoteOptionRequest {
  string address = 1;
  string post_id = 2;
}

message QueryVoteOptionResponse {
  string option_id = 1;
}
