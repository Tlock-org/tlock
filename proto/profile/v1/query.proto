syntax = "proto3";
package profile.v1;

import "google/api/annotations.proto";
import "profile/v1/genesis.proto";
import "profile/v1/profile.proto";
import "profile/v1/userSearch.proto";

option go_package = "github.com/rollchains/tlock/x/profile/types";

// Query provides defines the gRPC querier service.
service Query {
  // Params queries all parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/profile/v1/params";
  }

  rpc QueryProfile(QueryProfileRequest) returns (QueryProfileResponse) {
    option (google.api.http).get = "/profile/v1/get/{wallet_address}";
  }

  rpc QueryProfileAvatar(QueryProfileAvatarRequest) returns (QueryProfileAvatarResponse) {
    option (google.api.http).get = "/profile/v1/avatar/{address}";
  }

  rpc QueryFollowing(QueryFollowingRequest) returns (QueryFollowingResponse) {
    option (google.api.http).get = "/profile/v1/flowing/{wallet_address}/{page}/{limit}";
  };
  rpc QueryFollowers(QueryFollowersRequest) returns (QueryFollowersResponse) {
    option (google.api.http).get = "/profile/v1/flowers/{wallet_address}";
  };
  rpc QueryFollowRelationship(QueryFollowRelationshipRequest) returns (QueryFollowRelationshipResponse) {
    option (google.api.http).get = "/profile/v1/follow/relationship/{addressA}/{addressB}";
  };
  rpc GetMentionSuggestions(QueryGetMentionSuggestionsRequest) returns (QueryGetMentionSuggestionsResponse) {
    option (google.api.http).get = "/profile/v1/getMentionSuggestions/{address}/{matching}";
  };
//  rpc QueryActivitiesReceived(QueryActivitiesReceivedRequest) returns (QueryActivitiesReceivedResponse) {
//    option (google.api.http).get = "/profile/v1/activites/received/{wallet_address}";
//  };
  rpc QueryActivitiesReceivedCount(QueryActivitiesReceivedCountRequest) returns (QueryActivitiesReceivedCountResponse) {
    option (google.api.http).get = "/profile/v1/activites/received/count/{wallet_address}";
  };

  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {
    option (google.api.http).get = "/profile/v1/users/search/{matching}";
  };

  rpc IsAdmin(IsAdminRequest) returns (IsAdminResponse) {
    option (google.api.http).get = "/profile/v1/isAdmin/{address}";
  };
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1;
}

message QueryProfileRequest {
  string wallet_address = 1;
}

message QueryProfileResponse {
  Profile profile = 1;
}

message QueryProfileAvatarRequest {
  string address = 1;
}
message QueryProfileAvatarResponse {
  string avatar = 1;
}
message QueryFollowRelationshipRequest {
  string addressA = 1;
  string addressB = 2;
}

//relationship: 0-No relationship; 1-A follows B; 2-B follows A; 3-Mutual follows
message QueryFollowRelationshipResponse {
  uint64 relationship = 1;
}

message QueryFollowingRequest {
  string wallet_address = 1;
  uint64 page = 2;
  uint64 limit = 3;
}

message QueryFollowingResponse {
  repeated Profile Profiles = 1;
}

message QueryFollowersRequest {
  string wallet_address = 1;
}

message QueryFollowersResponse {
  repeated Profile Profiles = 1;
}

message QueryGetMentionSuggestionsRequest {
  string address = 1;
  string matching = 2;
}

message QueryGetMentionSuggestionsResponse {
  repeated Profile Profiles = 1;
}

message QueryActivitiesReceivedCountRequest {
  string wallet_address = 1;
}

message QueryActivitiesReceivedCountResponse {
  uint64 count = 1;
}

//message QueryHasUserHandleRequest {
//  string userHandle = 1;
//}
//
//message QueryHasUserHandleResponse {
//  string address = 1;
//}

message SearchUsersRequest {
  string matching = 1;
}

message SearchUsersResponse {
  repeated Profile users = 1;
}

message IsAdminRequest {
  string address = 1;
}

message IsAdminResponse {
  bool status = 1;
}
